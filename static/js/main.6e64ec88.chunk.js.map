{"version":3,"sources":["config.js","Components/Inbox/Inbox.js","Components/Calendar/Calendar.js","Components/Contacts/Contacts.js","App.js","serviceWorker.js","index.js"],"names":["Inbox","emails","useState","take","skip","sort","field","dir","dataState","setDataState","isSelecteedRow","setRowSelected","clickedRow","setClickedRow","className","onRowClick","e","dataItem","data","orderBy","pageable","sortable","total","length","onDataStateChange","width","title","filter","format","sender","subject","date","toString","content","clippedContent","onClick","Calendar","events","defaultView","workWeekStart","Day","Monday","workWeekEnd","Friday","startTime","endTime","ContactItem","props","item","shape","type","src","photo","alt","email","phone","ContactsHeader","Contancts","contacts","header","style","App","selected","setSelected","setEmails","setEvents","setContacts","authorize","setTimeout","window","gapi","auth","client_id","config","scope","immediate","handleGmailAuthorization","result","getEmails","access_token","getCalendarEvents","getContacts","fetch","then","response","json","res","messages","forEach","id","emailResponse","labelIds","includes","newEmail","messageHeaders","payload","headers","find","h","name","value","Date","snippet","substr","clippedSubject","oldEmails","catch","err","console","log","items","event","newEvent","start","end","dateTime","summary","oldEvents","feed","entry","contact","newContact","$t","gd$phoneNumber","gd$email","address","link","href","url","oldContacts","onSelect","Contacts","client","setApiKey","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.6e64ec88.chunk.js","sourcesContent":["export default {\r\n    PROJECT_ID : \"kendotest\",\r\n    CLIENT_ID : \"1084271638688-t6s75cnrcee96gsc46gr0q7uqrfnovt2.apps.googleusercontent.com\",\r\n    //API_KEY : 'cPcRGUSauApyZbKMZALMOjsG',\r\n    API_KEY : 'AIzaSyDC6A1Y0eo0voX2_yJs-1CqnvMAJzyQSXI',\r\n    SCOPE_CALENDAR : \"https://www.googleapis.com/auth/calendar.readonly\",\r\n    SCOPE_CONTACTS : 'https://www.googleapis.com/auth/contacts.readonly',\r\n    SCOPE_GMAIL : 'https://www.googleapis.com/auth/gmail.readonly',\r\n}","import React, { useState } from 'react';\r\nimport './inbox.css';\r\n\r\nimport { orderBy } from '@progress/kendo-data-query';\r\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\r\nimport { Card, CardHeader, CardBody, CardTitle, CardActions} from '@progress/kendo-react-layout';\r\n\r\nconst Inbox = ({emails}) => {\r\n\r\n    const [dataState, setDataState] = useState({ take: 10, skip: 0, sort: [{ field: \"date\", dir: \"des\" }], });\r\n    const [isSelecteedRow, setRowSelected] = useState(false);\r\n    const [clickedRow, setClickedRow] = useState({});\r\n\r\n    const handleGridDataStateChange = (e) => {\r\n        setDataState(e.data);\r\n    }\r\n\r\n    const handleBackButtonClick = () => {\r\n        setRowSelected(false);\r\n    }\r\n\r\n    const handleGridRowClick = (e) => {\r\n        setRowSelected(true);\r\n        setClickedRow(e.dataItem);\r\n    }\r\n    return (\r\n      <div className=\"inbox\">\r\n         <div className=\"site-grid-container\">\r\n            {isSelecteedRow === false \r\n            ? <Grid\r\n                onRowClick={handleGridRowClick}\r\n                data={orderBy(emails, dataState.sort)}\r\n                pageable={true}\r\n                sortable={true}\r\n                sort={dataState.sort}\r\n                skip={dataState.skip}\r\n                take={dataState.take}\r\n                total={emails.length}\r\n                onDataStateChange={handleGridDataStateChange}\r\n                className=\"site-grid\">\r\n                <GridColumn field=\"sender\" width=\"320px\" title=\"SENDER\" />\r\n                <GridColumn field=\"clippedSubject\" width=\"350px\" title=\"SUBJECT\" />\r\n                <GridColumn field=\"clippedContent\" title=\"CONTENT\"/>\r\n                <GridColumn field=\"date\" width=\"230px\" title=\"DATE\" filter=\"date\" format=\"{0:d-MMM-yyyy}\"/>\r\n            </Grid>\r\n            : <Card>\r\n              <CardHeader>{clickedRow.sender}</CardHeader>\r\n              <CardBody>\r\n                  <CardTitle>{clickedRow.subject}</CardTitle>\r\n                  <p>{clickedRow.date.toString()}</p>\r\n                  <p>{clickedRow.content}</p>\r\n                  <p>{clickedRow.clippedContent}</p>\r\n              </CardBody>\r\n              <CardActions>\r\n                  <span className=\"k-button k-flat k-primary\" onClick={handleBackButtonClick} >Back</span>\r\n                  <span className=\"k-button k-flat k-primary\">Reply</span>\r\n              </CardActions>\r\n            </Card>}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  export default Inbox;","import React from 'react';\r\nimport './calendar.css';\r\n\r\nimport { Scheduler, DayView, WeekView, MonthView } from '@progress/kendo-react-scheduler';\r\nimport { Day } from '@progress/kendo-date-math';\r\n\r\nconst Calendar = ({events}) => {\r\n    return (\r\n      <div className=\"Calendar\">\r\n          <Scheduler\r\n            data={events}\r\n            defaultView=\"week\"\r\n        >\r\n            <MonthView />\r\n            <WeekView workWeekStart={Day.Monday} workWeekEnd={Day.Friday}/>\r\n            <DayView startTime=\"09:00\" endTime=\"18:00\"/>\r\n        </Scheduler>\r\n      </div>\r\n    );\r\n  }\r\n  export default Calendar;","import React from 'react';\r\nimport './contacts.css';\r\n\r\nimport { ListView, ListViewHeader } from '@progress/kendo-react-listview';\r\nimport { Avatar } from '@progress/kendo-react-layout';\r\n\r\nconst ContactItem = props => {\r\n    let item = props.dataItem;\r\n    return (\r\n        <div className='row p-2 border-bottom list-item'>\r\n            <div className='col-2 avatar'>\r\n                <Avatar shape='circle' type='img' className='picture-avatar'>\r\n                    <img src={item.photo} alt='' className='photo'/>\r\n                </Avatar>\r\n            </div>\r\n            <div className='col-3 contact-name'>\r\n                <div>{item.title}</div>\r\n            </div>\r\n            <div className='col-3 contact-email'>\r\n                <div>{item.email}</div>\r\n            </div>\r\n            <div className='col-4 contact-phone'>\r\n                    <div className='k-chip-content'>\r\n                        {item.phone}\r\n                    </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst ContactsHeader = () => {\r\n    return (\r\n        <ListViewHeader className='contacts-header list-item'>\r\n            <div className='col-2 avatar'></div>\r\n            <div className='col-3 contact-name'>\r\n                NAME\r\n            </div>\r\n            <div className='col-3 contact-email'>\r\n                EMAIL\r\n            </div>\r\n            <div className='col-4 contact-phone'>\r\n              PHONE\r\n            </div>\r\n        </ListViewHeader>\r\n    );\r\n}\r\n\r\n\r\nconst Contancts = ({contacts}) => {\r\n\r\n    return (\r\n      <div className=\"Contacts\">\r\n        <ListView\r\n          data={contacts}\r\n          item={ContactItem}\r\n          header={ContactsHeader}\r\n          style={{ width: \"100%\" }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  export default Contancts;","import React, { useState } from 'react';\nimport config from './config.js';\n\nimport { TabStrip, TabStripTab } from '@progress/kendo-react-layout';\nimport { Button } from '@progress/kendo-react-buttons'\n\nimport Inbox from './Components/Inbox/Inbox';\nimport Calendar from './Components/Calendar/Calendar';\nimport Contacts from './Components/Contacts/Contacts';\n\nimport '../node_modules/@progress/kendo-theme-bootstrap/dist/all.scss';\nimport './App.css';\nimport './tabs.css';\n\nconst App = () => {\n\n  const [selected, setSelected] = useState(0);\n\n  const [emails, setEmails] = useState([]);\n  const [events, setEvents] = useState([]);\n  const [contacts, setContacts] = useState([]);\n\n  const handleSelect = (e) => {\n    setSelected(e.selected )\n  }\n\n  const handleAuth = () => {\n    window.gapi.client.setApiKey(config.API_KEY);\n    authorize();\n  }\n  const authorize = () => {\n        setTimeout( ()=> {\n          window.gapi.auth.authorize({ client_id: config.CLIENT_ID, scope: `${config.SCOPE_GMAIL} ${config.SCOPE_CALENDAR} ${config.SCOPE_CONTACTS}`, immediate: false }, handleGmailAuthorization);\n    });\n  }\n  const handleGmailAuthorization = (result) => {\n    getEmails(result.access_token);\n    getCalendarEvents(result.access_token);\n    getContacts(result.access_token);\n  }\n  const getEmails = (access_token) => {\n      fetch(`https://www.googleapis.com/gmail/v1/users/me/messages?access_token=${access_token}&maxResults=30`)\n          .then((response) => {\n              return response.json();\n          })\n          .then((res) => {\n              res.messages.forEach(email => {\n                fetch(`https://www.googleapis.com/gmail/v1/users/me/messages/${email.id}?access_token=${access_token}`)\n                  .then((response) => {\n                      return response.json();\n                  })\n                  .then((emailResponse) => {\n                    if(emailResponse.labelIds.includes(\"INBOX\")){\n                      \n                      let newEmail = {};\n                      let messageHeaders = emailResponse.payload.headers;\n                      newEmail.sender = messageHeaders.find(h => h.name === 'From').value;\n                      let subject = messageHeaders.find(h => h.name === 'Subject').value;\n                      newEmail.subject = subject;\n                      newEmail.date = new Date(messageHeaders.find(h => h.name === 'Date').value);\n                      newEmail.content = emailResponse.snippet;\n                      newEmail.clippedContent = emailResponse.snippet.substr(0, 50);\n                      newEmail.clippedSubject = subject.substr(0, 50);\n\n                      setEmails(oldEmails => [...oldEmails, newEmail]);\n                    }\n\n                  })\n              });\n              return res;\n          })\n          .catch((err) => {\n              console.log(err);\n          })\n      }\n  const getCalendarEvents = (access_token) => {\n      fetch(`https://www.googleapis.com/calendar/v3/calendars/primary/events?access_token=${access_token}`)\n          .then((response) => {\n              return response.json();\n          })\n          .then((res) => {\n            res.items.forEach(event => {\n              let newEvent = {};\n\n              if(event.start && event.end){\n                newEvent.id = event.id;\n                newEvent.start = new Date(event.start.dateTime);\n                newEvent.end = new Date(event.end.dateTime);\n                newEvent.title = event.summary;\n                \n                setEvents(oldEvents => [...oldEvents, newEvent]);\n              }\n\n            });\n          })\n          .catch((err) => {\n              console.log(err);\n          })\n    }\n\n  const getContacts = (access_token) => {\n      fetch(`https://www.google.com/m8/feeds/contacts/default/full?alt=json&access_token=${access_token}&max-results=25&v=3.0`)\n          .then((response) => {\n              return response.json();\n          })\n          .then((res) => {\n            res.feed.entry.forEach(contact => {\n              let newContact = {};\n\n              contact.title ?  newContact.title = contact.title.$t : newContact.title = \"\";\n              contact.gd$phoneNumber ? newContact.phone = contact.gd$phoneNumber[0].$t : newContact.phone = \"\";\n              contact.gd$email ? newContact.email = contact.gd$email[0].address : newContact.email = \"\";\n              contact.photo = \"\";\n              \n              let photo = contact.link[0].href;\n              if(photo){\n                fetch(`${photo}&access_token=${access_token}`)\n                  .then((response) => {\n                    newContact.photo = response.url;\n                  })\n                  .catch((err) => {\n                    console.log(err);\n                  })\n              }\n\n              setContacts(oldContacts => [...oldContacts, newContact]);\n            })\n              return res;\n          })\n          .catch((err) => {\n              console.log(err);\n          })\n    }\n  return (\n    <div className=\"App\">\n          {emails.length > 0 \n          ?<div className=\"tabs\">\n            <TabStrip selected={selected} onSelect={handleSelect}>\n                <TabStripTab title=\"Inbox\">\n                    <Inbox emails={emails}/>\n                </TabStripTab>\n                <TabStripTab title=\"Calendar\">\n                    <Calendar events={events}/>\n                </TabStripTab>\n                <TabStripTab title=\"Contacts\">\n                    <Contacts contacts={contacts}/>\n                </TabStripTab>\n            </TabStrip>\n          </div> \n        : <div >\n            <p>Please login</p>\n            <Button onClick={handleAuth} className=\"auth-btn\">Login</Button>\n          </div>}\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}